using System.Waf.Applications.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.FileHashGenerator.Applications.Services;
using Test.FileHashGenerator.Applications.Views;
using Waf.FileHashGenerator.Applications.Controllers;
using Waf.FileHashGenerator.Applications.Properties;
using Waf.FileHashGenerator.Applications.ViewModels;
using System.Waf.UnitTesting.Mocks;
using System.Waf.UnitTesting;

namespace Test.FileHashGenerator.Applications.Controllers;

[TestClass]
public class ModuleControllerTest : TestClassBase
{
    [TestMethod]
    public void ControllerLifecycle()
    {
        var controller = Get<ModuleController>();
        controller.Initialize();
        controller.Run();

        _ = Get<MockShellView>();
        _ = Get<ShellViewModel>();

        controller.Shutdown();
    }

    [TestMethod]
    public void OpenEmptyFile()
    {
        var controller = Get<ModuleController>();
        controller.Initialize();
        controller.Run();

        // Open file via OpenFileDialog
        var fileDialogService = Get<MockFileDialogService>();
        fileDialogService.Result = new(@"Files\EmptyFile.txt", new FileType(Resources.AllFiles, ".*"));

        var shellViewModel = Get<ShellViewModel>();
        shellViewModel.OpenCommand.Execute(null);

        var fileHashListViewModel = Get<FileHashListViewModel>();
        var fileHashItem = fileHashListViewModel.FileHashItems.Single();

        shellViewModel.HashMode = HashMode.Sha512;

        // Wait some time so that the hash value is generated by another thread.
        Context.WaitFor(() => fileHashItem.Item.Hash != null, TimeSpan.FromSeconds(5));
        Assert.AreEqual("CF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E", fileHashItem.Item.Hash);

        shellViewModel.HashMode = HashMode.Sha256;

        Context.WaitFor(() => fileHashItem.Item.Hash != null, TimeSpan.FromSeconds(5));
        Assert.AreEqual("E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855", fileHashItem.Item.Hash);

        shellViewModel.HashMode = HashMode.Sha1;

        Context.WaitFor(() => fileHashItem.Item.Hash != null, TimeSpan.FromSeconds(5));
        Assert.AreEqual("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", fileHashItem.Item.Hash);

        shellViewModel.HashMode = HashMode.MD5;

        Context.WaitFor(() => fileHashItem.Item.Hash != null, TimeSpan.FromSeconds(5));
        Assert.AreEqual("D41D8CD98F00B204E9800998ECF8427E", fileHashItem.Item.Hash);

        // Change formatting option
        shellViewModel.HashFormat = HashFormat.Base64;
        Assert.AreEqual("1B2M2Y8AsgTpgAmY7PhCfg==", fileHashItem.Item.Hash);

        // Open the same file again
        shellViewModel.OpenCommand.Execute(null);
        Assert.AreEqual(fileHashItem, fileHashListViewModel.FileHashItems.Single());

        // Close the item
        fileHashListViewModel.CloseCommand.Execute(fileHashItem.Item);
        Assert.IsFalse(fileHashListViewModel.FileHashItems.Any());

        controller.Shutdown();
    }

    [TestMethod]
    public void OpenMultipleFiles()
    {
        var controller = Get<ModuleController>();
        controller.Initialize();
        controller.Run();

        // Open files via drag and drop.
        var fileHashListViewModel = Get<FileHashListViewModel>();
        fileHashListViewModel.OpenFilesAction([ @"Files\EmptyFile.txt", @"Files\ReferenceFile.txt" ]);
        Assert.AreEqual(2, fileHashListViewModel.FileHashItems.Count);
        var emptyFileHash = fileHashListViewModel.FileHashItems[0];
        var referenceFileHash = fileHashListViewModel.FileHashItems[^1];

        // Wait some time so that the hash value is generated by another thread.
        Context.WaitFor(() => emptyFileHash.Item.Hash != null, TimeSpan.FromSeconds(5));

        Assert.AreEqual(@"Files\EmptyFile.txt", emptyFileHash.Item.FileName);
        Assert.AreEqual("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", emptyFileHash.Item.Hash);

        Assert.AreEqual(@"Files\ReferenceFile.txt", referenceFileHash.Item.FileName);
        Assert.AreEqual("2FD4E1C67A2D28FCED849EE1BB76E7391B93EB12", referenceFileHash.Item.Hash);

        controller.Shutdown();
    }

    [TestMethod]
    public void OpenNotExistingFiles()
    {
        var controller = Get<ModuleController>();
        controller.Initialize();

        var messageService = Get<MockMessageService>();
        var fileHashListViewModel = Get<FileHashListViewModel>();
        var systemService = Get<MockSystemService>();
        
        // Open files via command line parameters
        systemService.DocumentFileNames = [ "NotExistingFile1", "NotExistingFile2" ];
        bool errorShown = false;
        messageService.ShowErrorStub = (owner, msg) => 
        { 
            errorShown = true;
            Assert.IsNotNull(msg);
        };
        controller.Run();

        Assert.IsTrue(errorShown);
        Assert.IsFalse(fileHashListViewModel.FileHashItems.Any());
        
        controller.Shutdown();
    }
}
